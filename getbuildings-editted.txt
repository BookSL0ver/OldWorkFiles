// Copyright Â© 2019 NAME HERE <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main		//was cmd

import (
	"fmt"
	"log"
        "encoding/base64"	//was commented out
	"encoding/xml"
        "net/url"		//was commented out
	"regexp"		//was commented out

//	"github.com/spf13/cobra"
	"git.cae.wisc.edu/caesoapapis-go/caemip"
	"git.cae.wisc.edu/caesoapapis-go/caeauth"	//was commented out
	"github.com/hooklift/gowsdl/soap"
)

///import	caesoaputil	"git.cae.wisc.edu/cae-manageip-go-client/soaputil"

type SOAPHeader struct {
	XMLName xml.Name `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header"`

	Content interface{} `xml:",omitempty"`
}


type WSSSecurityHeader struct {
//	XMLName   xml.Name	`xml:"http://schemas.xmlsoap.org/soap/envelope/ wsse:Security"`
	XMLName   xml.Name	`xml:"wsse:Security"`
	XmlNSWsse string 	`xml:"xmlns:wsse,attr"`
	XmlNSWsu  string	`xml:"xmlns:wsu,attr"`
	Data string `xml:",innerxml"`
}

func NewWSSSecurityHeader(token string) *WSSSecurityHeader {
	hdr := &WSSSecurityHeader{XmlNSWsse: soap.WssNsWSSE, XmlNSWsu: soap.WssNsWSU, Data: token}
	return hdr;
}

/* my add
// getbuildingsCmd represents the getbuildings command
var getbuildingsCmd = &cobra.Command{
	Use:   "getbuildings",
	Short: "A brief description of your command",
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("getbuildings called")
		getBuildings()
	},
}
*/ //my add
///func getBuildings() {
func main() {

///	samlToken := caesoaputil.Login("sometest","superfunwebservicetesting")
//There was a /* here
	// Get the standard soap client
        mipclient := soap.NewClient("domain.com");	//was called client
	//get our auth service from the autogenerated code
        service := caeauth.NewCAEAuthService(mipclient);
        var username caeauth.CaeloginType
        username="sometest"
        var password caeauth.PasswordType
        password ="superfunwebservicetesting"
        reply, err := service.GetSAMLTokenFromUsernamePassword(&caeauth.GetSAMLTokenFromUsernamePasswordRequest{
											Loginname: &username,
	Password: &password,
											Application: "go-caeauth",})
        if err != nil {
                log.Fatalf("login failure: %v", err)
        }

	// yea we have it, but to use it in needs to be decoded and prepared to be put in a header in another request
        decodedOutput, err := base64.StdEncoding.DecodeString(reply.SAMLToken);
        urldecodedOutput, err := url.QueryUnescape(string(decodedOutput))

	//the xml header must also be removed in order to be prepared to insert in a request
        reg:= regexp.MustCompile(`\<\?xml.*\?\>\n`)
        samlToken := reg.ReplaceAllString(urldecodedOutput,"")

       	//fmt.Printf("SAMLToken: %s\n",samlToken)
//there was a */ here
// *************************************
/* my add
	//get the standard soap client
	mipclient := soap.NewClient("https://engr-ws-dev.cae.wisc.edu:8443/manageip-ws-endpoint/endpoint-1.0")
*/ //my add
	//make token into a header
	myheader:=SOAPHeader{Content: NewWSSSecurityHeader(samlToken)}
	mipclient.AddHeader(myheader)

// this was for testing
//	test,err := xml.Marshal(myheader)
//	if err!=nil{
//		log.Fatalf("Failed to test Marshal: %v", err)
//	}
//	fmt.Printf("--testms--\n%s\n",string(test))

	//make the manage ip object from the statically generated code
	mipservice := caemip.NewManageip(mipclient)
	
	// get the buildings
	mreply, err := mipservice.GetBuildings(&caemip.GetBuildingsRequest{})
        if err != nil {
                log.Fatalf("GetBuildings failure: %v", err)
        }

	//fmt.Printf("response:\n%#v\n",mreply)

//	fmt.Printf("Building: %s\n",mreply.Building[0].Building_name);

	for _, b := range mreply.Building {
		fmt.Printf("Building #%d: %s\n",b.Campus_building_number,b.Building_name);
	}
}

func init() {
///	rootCmd.AddCommand(getbuildingsCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// getbuildingsCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// getbuildingsCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
